#!/usr/bin/env python3
"""
Script para criar uma vers√£o de release completa do Space Defender
"""

import os
import sys
import subprocess
import shutil
import zipfile
from datetime import datetime

def check_requirements():
    """Verifica se todos os requisitos est√£o instalados"""
    print("Verificando requisitos...")
    
    try:
        import pygame
        print(f"‚úì Pygame {pygame.version.ver} encontrado")
    except ImportError:
        print("‚úó Pygame n√£o encontrado. Instale com: pip install pygame")
        return False
    
    try:
        import PyInstaller
        print(f"‚úì PyInstaller encontrado")
    except ImportError:
        print("‚úó PyInstaller n√£o encontrado. Instale com: pip install pyinstaller")
        return False
    
    return True

def create_executable():
    """Cria o execut√°vel do jogo"""
    print("\nCriando execut√°vel...")
    
    # Remove builds anteriores
    for folder in ["build", "dist", "__pycache__"]:
        if os.path.exists(folder):
            shutil.rmtree(folder)
            print(f"Removido: {folder}")
    
    # Remove arquivos spec
    for file in ["SpaceDefender.spec", "main.spec"]:
        if os.path.exists(file):
            os.remove(file)
            print(f"Removido: {file}")
    
    # Comando PyInstaller
    cmd = [
        "pyinstaller",
        "--onefile",
        "--windowed",
        "--name=SpaceDefender",
        "--distpath=release",
        "main.py"
    ]
    
    try:
        print("Executando PyInstaller...")
        result = subprocess.run(cmd, check=True, capture_output=True, text=True)
        print("‚úì Execut√°vel criado com sucesso!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚úó Erro ao criar execut√°vel: {e}")
        if e.stderr:
            print("Erro detalhado:")
            print(e.stderr)
        return False

def create_documentation():
    """Cria documenta√ß√£o adicional"""
    print("\nCriando documenta√ß√£o...")

    try:
        # Cria arquivo de instru√ß√µes
        instructions = """SPACE DEFENDER - INSTRU√á√ïES DE JOGO

COMO JOGAR:
1. Execute SpaceDefender (ou SpaceDefender.exe no Windows)
2. No menu principal, pressione ESPA√áO para come√ßar
3. Use as setas ou WASD para mover a nave
4. Pressione ESPA√áO para atirar
5. Destrua asteroides para ganhar pontos
6. Evite colis√µes - voc√™ tem 3 vidas
7. Tente bater seu recorde!

CONTROLES:
- Setas ou WASD: Mover nave
- Espa√ßo: Atirar
- ESC: Sair do jogo
- R: Reiniciar (quando game over)

DICAS:
- Asteroides grandes se dividem quando destru√≠dos
- Asteroides menores d√£o mais pontos
- Voc√™ fica invulner√°vel por 2 segundos ap√≥s ser atingido
- A dificuldade aumenta com o tempo

REQUISITOS DO SISTEMA:
- Windows 7 ou superior (para .exe)
- Linux (execut√°vel nativo)
- N√£o requer instala√ß√£o
- N√£o requer Python instalado

DESENVOLVIDO EM PYTHON COM PYGAME
Projeto acad√™mico - Generation Brasil
"""

        with open("release/INSTRU√á√ïES.txt", "w", encoding="utf-8") as f:
            f.write(instructions)

        print("‚úì Arquivo de instru√ß√µes criado")
        return True
    except Exception as e:
        print(f"‚úó Erro ao criar documenta√ß√£o: {e}")
        return False

def create_zip_package():
    """Cria pacote ZIP para distribui√ß√£o"""
    print("\nCriando pacote ZIP...")
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    zip_name = f"SpaceDefender_v1.0_{timestamp}.zip"
    
    with zipfile.ZipFile(zip_name, 'w', zipfile.ZIP_DEFLATED) as zipf:
        # Adiciona execut√°vel (verifica ambos os nomes)
        if os.path.exists("release/SpaceDefender.exe"):
            zipf.write("release/SpaceDefender.exe", "SpaceDefender.exe")
            print("‚úì Execut√°vel Windows adicionado ao ZIP")
        elif os.path.exists("release/SpaceDefender"):
            zipf.write("release/SpaceDefender", "SpaceDefender")
            print("‚úì Execut√°vel Linux adicionado ao ZIP")

        # Adiciona instru√ß√µes
        if os.path.exists("release/INSTRU√á√ïES.txt"):
            zipf.write("release/INSTRU√á√ïES.txt", "INSTRU√á√ïES.txt")
            print("‚úì Instru√ß√µes adicionadas ao ZIP")

        # Adiciona README
        if os.path.exists("README.md"):
            zipf.write("README.md", "README.md")
            print("‚úì README adicionado ao ZIP")
    
    print(f"‚úì Pacote criado: {zip_name}")
    return zip_name

def cleanup():
    """Limpa arquivos tempor√°rios"""
    print("\nLimpando arquivos tempor√°rios...")
    
    for folder in ["build", "__pycache__"]:
        if os.path.exists(folder):
            shutil.rmtree(folder)
    
    for file in ["SpaceDefender.spec"]:
        if os.path.exists(file):
            os.remove(file)
    
    # Limpa cache Python em subpastas
    for root, dirs, files in os.walk("."):
        for dir_name in dirs:
            if dir_name == "__pycache__":
                shutil.rmtree(os.path.join(root, dir_name))
    
    print("‚úì Limpeza conclu√≠da")

def main():
    """Fun√ß√£o principal"""
    print("=" * 60)
    print("SPACE DEFENDER - CRIA√á√ÉO DE RELEASE")
    print("=" * 60)
    
    # Verifica se est√° no diret√≥rio correto
    if not os.path.exists("main.py"):
        print("‚úó Erro: Execute este script no diret√≥rio do jogo")
        return False
    
    # Verifica requisitos
    if not check_requirements():
        return False
    
    # Cria pasta de release
    if not os.path.exists("release"):
        os.makedirs("release")
        print("‚úì Pasta release criada")
    
    # Executa etapas
    steps = [
        ("Criar execut√°vel", create_executable),
        ("Criar documenta√ß√£o", create_documentation),
    ]
    
    for step_name, step_func in steps:
        print(f"\n{'='*20} {step_name} {'='*20}")
        if not step_func():
            print(f"‚úó Falha em: {step_name}")
            return False
    
    # Cria ZIP
    zip_name = create_zip_package()
    
    # Limpeza
    cleanup()
    
    print("\n" + "=" * 60)
    print("RELEASE CRIADA COM SUCESSO!")
    print("=" * 60)
    print(f"Execut√°vel: release/SpaceDefender.exe")
    print(f"Pacote ZIP: {zip_name}")
    print("\nPara distribuir:")
    print(f"1. Envie o arquivo {zip_name}")
    print("2. O usu√°rio deve extrair e executar SpaceDefender.exe")
    print("3. N√£o requer instala√ß√£o ou Python")
    
    return True

if __name__ == "__main__":
    success = main()
    if success:
        print("\nüéâ Release pronta para distribui√ß√£o!")
    else:
        print("\n‚ùå Erro na cria√ß√£o da release")
    
    input("\nPressione Enter para sair...")
    sys.exit(0 if success else 1)
